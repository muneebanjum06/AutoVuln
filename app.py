from flask import Flask, render_template, request, jsonify
from scanner.deepseek_api import send_to_deepseek
from scanner.form_extractor import extract_forms_from_url
import requests
from urllib.parse import urlparse
from datetime import datetime

app = Flask(__name__)

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/scan', methods=['POST'])
def scan():
    data = request.get_json()
    url = data.get('url', '').strip()

    if not url:
        return jsonify({"error": "Please enter a URL to scan"}), 400

    try:
        # Validate and normalize URL
        if not url.startswith(('http://', 'https://')):
            url = 'https://' + url
        
        parsed = urlparse(url)
        if not parsed.netloc:
            return jsonify({"error": "Invalid URL format"}), 400

        # Extract forms from the URL
        forms = extract_forms_from_url(url)
        
        if not forms:
            return jsonify({"error": "No HTML forms found on this page"}), 400

        # Send forms to DeepSeek for analysis
        analysis_result = send_to_deepseek(forms)
        
        if not analysis_result:
            return jsonify({"error": "Vulnerability analysis failed"}), 500

        # Format the results
        report_html = generate_report_html(url, len(forms), analysis_result)
        
        return jsonify({"report": report_html})
        
    except requests.exceptions.RequestException as e:
        return jsonify({"error": f"Could not access URL: {str(e)}"}), 400
    except Exception as e:
        return jsonify({"error": f"Scan error: {str(e)}"}), 500

def generate_report_html(url, form_count, analysis_text):
    """Generate formatted HTML report from analysis text"""
    vuln_count = analysis_text.count('**Vulnerability:**') or analysis_text.count('**') // 2
    
    return f"""
    <div class="report-container">
        <div class="report-header">
            <h2>Security Assessment Report</h2>
            <div class="report-meta">
                <span><i class="fas fa-globe"></i> {url}</span>
                <span><i class="fas fa-calendar-alt"></i> {datetime.now().strftime('%Y-%m-%d %H:%M')}</span>
                <span class="{'high-vuln' if vuln_count > 0 else 'no-vuln'}"><i class="fas fa-bug"></i> {vuln_count} vulnerabilities</span>
            </div>
        </div>
        <div class="report-content">
            <h3 class="findings-title">Vulnerability Findings</h3>
            <p class="findings-intro">The following security vulnerabilities were identified during the assessment:</p>
            {parse_vulnerability_content(analysis_text)}
            <div class="report-footer">
                <p>Generated by AutoVuln Security Scanner</p>
            </div>
        </div>
    </div>
    """

def parse_vulnerability_content(text):
    """Convert raw vulnerability text to formatted HTML"""
    html = []
    current_vuln = []
    in_vulnerability = False

    for line in text.split('\n'):
        line = line.strip()
        if not line:
            continue

        if line.startswith('**Vulnerability:**') or (line.startswith('**') and line.endswith('**') and not in_vulnerability):
            if current_vuln:
                html.append(format_vulnerability(current_vuln))
                current_vuln = []
            current_vuln.append(('title', line.replace('**Vulnerability:**', '').replace('**', '').strip()))
            in_vulnerability = True
        elif line.startswith('**Issue:**'):
            current_vuln.append(('issue', line.replace('**Issue:**', '').strip()))
        elif line.startswith('**Fix:**'):
            current_vuln.append(('fix', line.replace('**Fix:**', '').strip()))
        elif in_vulnerability:
            if current_vuln and current_vuln[-1][0] in ('issue', 'fix'):
                current_vuln[-1] = (current_vuln[-1][0], current_vuln[-1][1] + ' ' + line.strip())

    if current_vuln:
        html.append(format_vulnerability(current_vuln))

    return '\n'.join(html)

def format_vulnerability(vuln_data):
    """Format a single vulnerability section"""
    title = ''
    issue = ''
    fix = ''
    
    for type_, content in vuln_data:
        if type_ == 'title':
            title = content
        elif type_ == 'issue':
            issue = content
        elif type_ == 'fix':
            fix = content
    
    return f"""
    <div class="vulnerability">
        <h3 class="vuln-title">{title}</h3>
        <div class="vuln-details">
            <div class="vuln-section">
                <h4 class="section-title">Issue</h4>
                <p>{issue}</p>
            </div>
            <div class="vuln-section">
                <h4 class="section-title">Recommended Fix</h4>
                <p>{fix}</p>
            </div>
        </div>
    </div>
    """

if __name__ == '__main__':
    app.run(debug=True)